// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Club {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bannerImage Boolean @default(false)

  name        String    @unique
  description String
  advisor     Teacher   @relation("AdvisorClubs", fields: [advisorId], references: [id])
  meetings    Meeting[]
  founder     Student   @relation("FoundedClubs", fields: [founderId], references: [id])
  officers    Officer[]
  members     Member[]

  advisorId String @db.ObjectId
  founderId String @db.ObjectId
}

type Meeting {
  name     String
  location String
  duration Int

  schedule RecurrenceRuleSet
}

type RecurrenceRuleSet {
  rrules  String[]
  rdates  DateTime[]
  exrules String[]
  exdates DateTime[]
}

model Officer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student @relation(fields: [studentEmail], references: [email])
  role    String
  club    Club    @relation(fields: [clubName], references: [name])

  studentEmail String
  clubName     String

  @@unique([studentEmail, role, clubName])
}

model Member {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student @relation(fields: [studentEmail], references: [email])
  club    Club    @relation(fields: [clubName], references: [name])

  studentEmail String
  clubName     String

  @@unique([studentEmail, clubName])
}

model Student {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  email        String    @unique
  graduation   DateTime
  foundedClubs Club[]    @relation("FoundedClubs")
  officerRoles Officer[]
  memberships  Member[]

  verified Boolean @default(false)
}

model Teacher {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String
  email          String @unique
  advisorOfClubs Club[] @relation("AdvisorClubs")
}
